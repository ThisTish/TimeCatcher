datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories Category[]
  completedGoals Goal[]
  timeLogs TimeLog[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id String
  token      String
  expires    DateTime
  email      String
  @@id([id, token])
}

enum Color {
  BLUE
  GREEN
  YELLOW
  ORANGE
  RED
  PURPLE
  PINK
  BROWN
  GREY
  BLACK
  WHITE
}

model Category { 
  id String @id @default(uuid())
  name String
  userId String
  color Color
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  goals Goal[]
  timeLogs TimeLog[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

enum TimeFrame {
  DAY
  WEEK
  MONTH
  YEAR
}

model Goal { 
  id String @id @default(uuid())
  categoryId String
  userId String?
  timeFrame TimeFrame
  targetTime Float
  completed Boolean
  reoccurring Boolean
  active Boolean

  startDate DateTime
  endDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])
  @@index([userId])
  @@index([categoryId])
  
  @@unique([categoryId, timeFrame, active], name: "unique_active_goal_per_category_timeFrame")
}

model TimeLog {
  id String @id @default(uuid())
  userId String
  categoryId String
  startTime DateTime
  endTime DateTime?
  timePassed Float
  running Boolean
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([categoryId])
}

model resetPasswordToken {
  id String
  token      String
  expires    DateTime
  email      String
  @@id([id, token])
}